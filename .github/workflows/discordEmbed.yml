name: Build discordembed

on:
  push:
    paths:
      - "discordEmbed/**"
      - ".github/workflows/discordEmbed.yml"
    branches:
      - main
      - dev

jobs:
  checks:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master

      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@master
        with:
          dockerfile: "discordEmbed/Dockerfile"

  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-20.04
    needs: [checks]
    strategy:
      matrix:
        architecture: [linux-arm-v7, linux-arm64, linux-amd64]
    outputs:
      action: ${{ steps.prep.outputs.action }}
      repo: ${{ steps.prep.outputs.repo }}
      user_name: ${{ steps.prep.outputs.user_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master

      - name: Prepare
        id: prep
        run: |
          ACTION=discordembed
          ARCHITECTURE=${{ matrix.architecture }}
          USER="$(echo ${GITHUB_REPOSITORY_OWNER} | tr '[:upper:]' '[:lower:]')"
          REPO="$(echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]')"
          echo ::set-output name=action::${ACTION}
          echo ::set-output name=user_name::${USER}
          echo ::set-output name=platform::${ARCHITECTURE//-/\/}
          echo ::set-output name=tag::${REPO}:${ACTION}-${GITHUB_REF//refs\/heads\//}-${GITHUB_SHA:0:8}-${GITHUB_RUN_NUMBER}-${{ matrix.architecture }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ steps.prep.outputs.user_name }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ steps.prep.outputs.user_name }}
          password: ${{ secrets.PERSONAL_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          platforms: ${{ steps.prep.outputs.platform }}
          file: ./discordEmbed/Dockerfile
          context: ./discordEmbed
          tags: |
            ${{ steps.prep.outputs.tag }}
            ghcr.io/${{ steps.prep.outputs.tag }}

      - name: Dive Analysis
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: "${{ steps.prep.outputs.tag }}"

  publish:
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ needs.build.outputs.user_name }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ needs.build.outputs.user_name }}
          password: ${{ secrets.PERSONAL_TOKEN }}

      - name: Create manifests for DockerHub
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          IMAGE=${{ needs.build.outputs.repo }}
          TAG=${{ needs.build.outputs.action }}-${GITHUB_REF//refs\/heads\//}
          SOURCE=${IMAGE}:${TAG}-${GITHUB_RUN_NUMBER}
          docker manifest create ${IMAGE}:${TAG}                                    --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}
          docker manifest create ${IMAGE}:${TAG}-${GITHUB_SHA:0:8}                  --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}-${GITHUB_SHA:0:8}
          if [[ ${GITHUB_REF//refs\/heads\//} == release ]]; then
          docker manifest create ${IMAGE}:latest                                    --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:latest
          fi

      - name: Create manifests for GitHub Container Registry
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          IMAGE=ghcr.io/${{ needs.build.outputs.repo }}
          TAG=${{ needs.build.outputs.action }}-${GITHUB_REF//refs\/heads\//}
          SOURCE=${IMAGE}:${TAG}-${GITHUB_RUN_NUMBER}
          docker manifest create ${IMAGE}:${TAG}                                    --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}
          docker manifest create ${IMAGE}:${TAG}-${GITHUB_SHA:0:8}                  --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:${TAG}-${GITHUB_SHA:0:8}
          if [[ ${GITHUB_REF//refs\/heads\//} == release ]]; then
          docker manifest create ${IMAGE}:latest                                    --amend ${SOURCE}-linux-amd64 --amend ${SOURCE}-linux-arm-v7 --amend ${SOURCE}-linux-arm64 && docker manifest push ${IMAGE}:latest
          fi
